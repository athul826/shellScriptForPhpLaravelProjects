#!/bin/bash

# Color definitions
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
ORANGE='\033[0;33m'
BOLD_ORANGE='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to print messages in color
print_color() {
    local message=$1
    local color=$2
    echo -e "${color}${message}${NC}"
}

# Function to ensure Nginx configuration consistency
ensure_nginx_config_consistency() {
    local domain=$1
    local sites_available="/etc/nginx/sites-available"
    local sites_enabled="/etc/nginx/sites-enabled"

    # Remove existing configurations except 'default'
    for config in "$sites_available"/*; do
        if [ "$(basename "$config")" != "default" ] && [ "$(basename "$config")" != "$domain" ]; then
            print_color "Existing configuration found: $(basename "$config")" "$YELLOW"
            read -p "Do you want to remove it? (y/n): " remove_yn
            if [ "$remove_yn" == "y" ]; then
                sudo rm "$config"
                sudo rm -f "$sites_enabled/$(basename "$config")"
                print_color "Removed $(basename "$config")" "$GREEN"
            fi
        fi
    done

    # Create new configuration
    print_color "Creating a new Nginx configuration file for $domain..." "$GREEN"
    cat << EOF | sudo tee "$sites_available/$domain"
server {
    listen 80;
    server_name $domain;
    root $PROJECT_DIR/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php$PHP_VERSION-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
EOF

    # Ensure the symlink in sites-enabled is correct
    sudo ln -sf "$sites_available/$domain" "$sites_enabled/$domain"

    print_color "Nginx configuration for $domain is now set up." "$GREEN"
}

# Check if Nginx is installed
if ! command_exists nginx; then
    print_color "Nginx is not installed. Installing it now..." "$YELLOW"
    sudo apt update
    sudo apt install -y nginx
    if ! command_exists nginx; then
        print_color "Failed to install Nginx. Please install it manually and run this script again." "$RED"
        exit 1
    fi
    print_color "Nginx installed successfully." "$GREEN"
fi

# Step 1: Prompt for project details
read -p "Enter the project name: " PROJECT_NAME
read -p "Enter the Git URL: " GIT_URL
read -p "Enter the Git branch name: " GIT_BRANCH
read -p "Enter the PHP version (e.g., 7.4, 8.1, 8.2): " PHP_VERSION
read -p "Enter the domain name for Nginx configuration: " DOMAIN_NAME

# Step 2: Add PPAs and Install PHP and required extensions
print_color "Adding necessary PPAs and installing PHP $PHP_VERSION and required extensions..." "$GREEN"
sudo add-apt-repository ppa:ondrej/php
sudo apt update
sudo apt install -y php$PHP_VERSION php$PHP_VERSION-cli php$PHP_VERSION-fpm php$PHP_VERSION-mysql php$PHP_VERSION-xml php$PHP_VERSION-mbstring php$PHP_VERSION-curl php$PHP_VERSION-intl php$PHP_VERSION-gd php$PHP_VERSION-zip

if [[ $PHP_VERSION == 7.4 ]]; then
    sudo add-apt-repository ppa:ondrej/apache2
    sudo add-apt-repository ppa:ondrej/nginx
fi

# Step 3: Install Composer
if ! command_exists composer; then
    print_color "Installing Composer..." "$GREEN"
    curl -sS https://getcomposer.org/installer -o composer-setup.php
    sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    rm composer-setup.php
fi

# Verify installations
print_color "Verifying installations..." "$GREEN"
php -v
composer -v
nginx -v

# Step 4: Install and configure MySQL
print_color "Installing MySQL..." "$GREEN"
sudo apt update
sudo apt install -y mysql-server

print_color "Starting MySQL service..." "$GREEN"
sudo systemctl start mysql.service

# Prompt to customize the ALTER USER command
while true; do
    echo "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';"
    print_color "Do you want to edit this command? (y/n):" "$YELLOW"
    read -r yn
    case $yn in
        [Yy]* ) 
            read -p "Enter the new MySQL root password: " MYSQL_ROOT_PASSWORD
            ALTER_COMMAND="ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '$MYSQL_ROOT_PASSWORD';"
            echo "Executing: $ALTER_COMMAND"
            sudo mysql -e "$ALTER_COMMAND"
            break;;
        [Nn]* ) 
            MYSQL_ROOT_PASSWORD="password"
            ALTER_COMMAND="ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '$MYSQL_ROOT_PASSWORD';"
            echo "Executing default command: $ALTER_COMMAND"
            sudo mysql -e "$ALTER_COMMAND"
            break;;
        * ) echo "Please answer yes or no.";;
    esac
done

# Confirm configuration success
while true; do
    print_color "MySQL root user configured successfully. Do you want to exit MySQL setup? (y/n):" "$YELLOW"
    read -r yn
    case $yn in
        [Yy]* ) break;;
        [Nn]* ) echo "Returning to MySQL setup...";;
        * ) echo "Please answer yes or no.";;
    esac
done

# Test MySQL access
print_color "Testing MySQL access..." "$GREEN"
mysql -u root -p$MYSQL_ROOT_PASSWORD -e "SHOW DATABASES;" || { print_color "Error: MySQL access test failed." "$RED"; exit 1; }

# Provide access to MySQL prompt for further database creation
print_color "You can now create a new database and use it." "$GREEN"
mysql -u root -p$MYSQL_ROOT_PASSWORD || { print_color "Error: Failed to access MySQL prompt." "$RED"; exit 1; }

# Fetch code from GitHub and set up project environment file
print_color "Fetching code from GitHub..." "$GREEN"
PROJECT_DIR="/var/www/html/$PROJECT_NAME"

if [ -d "$PROJECT_DIR" ]; then
    echo "Directory $PROJECT_DIR already exists."
    print_color "Do you want to remove the existing directory and clone a new repository? (y/n):" "$YELLOW"
    read -r remove_yn
    if [ "$remove_yn" == "y" ]; then
        echo "Removing existing directory..."
        sudo rm -rf "$PROJECT_DIR"
    else
        print_color "Aborting the script." "$RED"
        exit 1
    fi
fi

sudo mkdir -p "$PROJECT_DIR"
sudo chown -R www-data:www-data "$PROJECT_DIR"

git clone -b "$GIT_BRANCH" "$GIT_URL" "$PROJECT_DIR" || { print_color "Error: Failed to clone the repository." "$RED"; exit 1; }

cd "$PROJECT_DIR" || { print_color "Error: Project directory $PROJECT_DIR does not exist." "$RED"; exit 1; }

# Look for potential environment files and create .env
ENV_FILE_FOUND=false
for env_file in .env.example example.env env.example; do
    if [ -f "$env_file" ]; then
        echo "Creating .env file from $env_file..."
        cp "$env_file" .env
        ENV_FILE_FOUND=true
        break
    fi
done

if [ "$ENV_FILE_FOUND" = false ]; then
    print_color "Error: No environment file (.env.example, example.env, or env.example) found. Please create a .env file manually." "$RED"
    exit 1
fi

# Prompt to set up .env file credentials
while true; do
    print_color ".env file has been created. Do you want to set up .env file credentials? (y/n):" "$YELLOW"
    read -r yn
    case $yn in
        [Yy]* ) 
            echo "Opening .env file for editing..."
            sudo vim .env
            break;;
        [Nn]* ) 
            echo "Skipping .env file setup. Make sure to configure it before proceeding."
            break;;
        * ) echo "Please answer yes or no.";;
    esac
done

# Set permissions
print_color "Setting file permissions..." "$GREEN"
sudo chown -R www-data:www-data "$PROJECT_DIR"
sudo find "$PROJECT_DIR" -type d -exec chmod 755 {} \;
sudo find "$PROJECT_DIR" -type f -exec chmod 644 {} \;

# Ensure necessary directories are writable
print_color "Ensuring necessary directories are writable..." "$GREEN"
sudo chmod -R 775 "$PROJECT_DIR/storage" "$PROJECT_DIR/bootstrap/cache"

# Install dependencies
print_color "Installing Composer dependencies..." "$GREEN"
sudo -u www-data composer install --no-interaction --prefer-dist --optimize-autoloader

# Generate application key
print_color "Generating application key..." "$GREEN"
sudo -u www-data php artisan key:generate

# Run migrations
print_color "Do you want to run database migrations? (y/n):" "$YELLOW"
read -r run_migrations
if [ "$run_migrations" == "y" ]; then
    sudo -u www-data php artisan migrate
fi

# Handle Nginx configuration files
print_color "Handling Nginx configuration files..." "$GREEN"
ensure_nginx_config_consistency "$DOMAIN_NAME"

print_color "Testing Nginx configuration..." "$GREEN"
sudo nginx -t || { print_color "Error: Nginx configuration test failed." "$RED"; exit 1; }

print_color "Restarting Nginx service..." "$GREEN"
sudo systemctl restart nginx || { print_color "Error: Failed to restart Nginx service." "$RED"; exit 1; }

# Verify DNS configuration
print_color "Verifying DNS configuration for $DOMAIN_NAME..." "$GREEN"
SERVER_IP=$(curl -s ifconfig.me)
DNS_IP=$(dig +short $DOMAIN_NAME)

if [ "$SERVER_IP" = "$DNS_IP" ]; then
    print_color "DNS configuration is correct. $DOMAIN_NAME points to this server." "$GREEN"
else
    print_color "Warning: DNS configuration may not be correct." "$YELLOW"
    echo -e "${ORANGE}Server IP: ${BOLD_ORANGE}$SERVER_IP${NC}"
    echo -e "${ORANGE}DNS resolves to: ${BOLD_ORANGE}$DNS_IP${NC}"
    echo "Please ensure your domain is pointing to the correct IP address."
fi

print_color "Script completed successfully." "$GREEN"
print_color "Please check the following:" "$YELLOW"
echo -e "1. Your Laravel application is correctly set up in ${BOLD_ORANGE}$PROJECT_DIR${NC}"
echo -e "2. The .env file in your Laravel application is correctly configured"
echo -e "3. Your domain (${BOLD_ORANGE}$DOMAIN_NAME${NC}) is pointing to this server's IP address"
echo -e "4. Nginx is running and the configuration is correct"
print_color "If everything is set up correctly, your Laravel application should now be accessible at http://${BOLD_ORANGE}$DOMAIN_NAME${NC}" "$GREEN"
print_color "Server IP address: ${BOLD_ORANGE}$SERVER_IP${NC}" "$GREEN"
