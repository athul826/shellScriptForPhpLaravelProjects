#!/bin/bash

# Color definitions
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if Nginx is installed
if ! command_exists nginx; then
    echo -e "${YELLOW}Nginx is not installed. Would you like to install it now? (y/n):${NC} "
    read -r install_nginx
    if [[ $install_nginx =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}Installing Nginx...${NC}"
        sudo apt update
        sudo apt install -y nginx
        if ! command_exists nginx; then
            echo -e "${RED}Failed to install Nginx. Please install it manually and run this script again.${NC}"
            exit 1
        fi
        echo -e "${GREEN}Nginx installed successfully.${NC}"
    else
        echo -e "${RED}Nginx is required for this script. Please install it manually and run this script again.${NC}"
        exit 1
    fi
fi

# Step 1: Prompt for project details
read -p "Enter the name as the correct project name: " PROJECT_NAME
read -p "Enter the Git URL: " GIT_URL
read -p "Enter the Git branch name: " GIT_BRANCH
read -p "Enter the PHP version (e.g., 7.4, 8.1, 8.2): " PHP_VERSION
read -p "Enter the domain name for Nginx configuration: " DOMAIN_NAME

# Step 2: Add PPAs and Install PHP and required extensions
echo -e "${GREEN}Adding necessary PPAs and installing PHP $PHP_VERSION and required extensions...${NC}"

# Add the PHP PPA
sudo add-apt-repository ppa:ondrej/php
sudo apt update

# Install PHP and required extensions based on the requested version
sudo apt install -y php$PHP_VERSION php$PHP_VERSION-cli php$PHP_VERSION-fpm php$PHP_VERSION-mysql php$PHP_VERSION-xml php$PHP_VERSION-mbstring php$PHP_VERSION-curl php$PHP_VERSION-intl php$PHP_VERSION-gd php$PHP_VERSION-zip

# Add PPA for Apache or Nginx if needed
if [[ $PHP_VERSION == 7.4 ]]; then
    sudo add-apt-repository ppa:ondrej/apache2
    sudo add-apt-repository ppa:ondrej/nginx
fi

# Step 3: Install Composer
echo -e "${GREEN}Installing Composer...${NC}"

# Download and install Composer
curl -sS https://getcomposer.org/installer -o composer-setup.php
sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer

# Verify installations
echo -e "${GREEN}Verifying installations...${NC}"
php -v
composer -v
nginx -v

echo -e "${GREEN}Installation complete. Project details:${NC}"
echo "Project Name: $PROJECT_NAME"
echo "Git URL: $GIT_URL"
echo "Branch Name: $GIT_BRANCH"
echo "PHP Version: $PHP_VERSION"
echo "Domain Name: $DOMAIN_NAME"

# Step 4: Install and configure MySQL
echo -e "${GREEN}Installing MySQL...${NC}"
sudo apt update
sudo apt install -y mysql-server

echo -e "${GREEN}Starting MySQL service...${NC}"
sudo systemctl start mysql.service

# Prompt to customize the ALTER USER command
while true; do
    echo "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';"
    echo -e "${YELLOW}Do you want to edit this command? (y/n):${NC} "
    read -r yn
    case $yn in
        [Yy]* ) 
            read -p "Enter the new MySQL root password: " MYSQL_ROOT_PASSWORD
            ALTER_COMMAND="ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '$MYSQL_ROOT_PASSWORD';"
            echo "Executing: $ALTER_COMMAND"
            sudo mysql -e "$ALTER_COMMAND"
            break;;
        [Nn]* ) 
            MYSQL_ROOT_PASSWORD="password"
            ALTER_COMMAND="ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '$MYSQL_ROOT_PASSWORD';"
            echo "Executing default command: $ALTER_COMMAND"
            sudo mysql -e "$ALTER_COMMAND"
            break;;
        * ) echo "Please answer yes or no.";;
    esac
done

# Confirm configuration success
while true; do
    echo -e "${YELLOW}MySQL root user configured successfully. Do you want to exit MySQL setup? (y/n):${NC} "
    read -r yn
    case $yn in
        [Yy]* ) break;;
        [Nn]* ) echo "Returning to MySQL setup...";;
        * ) echo "Please answer yes or no.";;
    esac
done

# Test MySQL access
echo -e "${GREEN}Testing MySQL access...${NC}"
mysql -u root -p$MYSQL_ROOT_PASSWORD -e "SHOW DATABASES;" || { echo -e "${RED}Error: MySQL access test failed.${NC}"; exit 1; }

# Provide access to MySQL prompt for further database creation
echo -e "${GREEN}You can now create a new database and use it.${NC}"
mysql -u root -p$MYSQL_ROOT_PASSWORD || { echo -e "${RED}Error: Failed to access MySQL prompt.${NC}"; exit 1; }

# Step 5: Fetch code from GitHub and set up project environment file
echo -e "${GREEN}Fetching code from GitHub...${NC}"
PROJECT_DIR="/var/www/html/$PROJECT_NAME"

# Check if the directory exists
if [ -d "$PROJECT_DIR" ]; then
    echo "Directory $PROJECT_DIR already exists."
    echo -e "${YELLOW}Do you want to remove the existing directory and clone a new repository? (y/n):${NC} "
    read -r remove_yn
    if [ "$remove_yn" == "y" ]; then
        echo "Removing existing directory..."
        sudo rm -rf "$PROJECT_DIR"
    else
        echo -e "${RED}Aborting the script.${NC}"
        exit 1
    fi
fi

# Clone the project repository
git clone -b "$GIT_BRANCH" "$GIT_URL" "$PROJECT_DIR" || { echo -e "${RED}Error: Failed to clone the repository.${NC}"; exit 1; }

# Navigate to the project directory
cd "$PROJECT_DIR" || { echo -e "${RED}Error: Project directory $PROJECT_DIR does not exist.${NC}"; exit 1; }

# Look for potential environment files and create .env
ENV_FILE_FOUND=false
for env_file in .env.example example.env env.example; do
    if [ -f "$env_file" ]; then
        echo "Creating .env file from $env_file..."
        cp "$env_file" .env
        ENV_FILE_FOUND=true
        break
    fi
done

if [ "$ENV_FILE_FOUND" = false ]; then
    echo -e "${RED}Error: No environment file (.env.example, example.env, or env.example) found. Please create a .env file manually.${NC}"
    exit 1
fi

# Prompt to set up .env file credentials
while true; do
    echo -e "${YELLOW}.env file has been created. Do you want to set up .env file credentials? (y/n):${NC} "
    read -r yn
    case $yn in
        [Yy]* ) 
            echo "Opening .env file for editing..."
            sudo vim .env
            break;;
        [Nn]* ) 
            echo "Skipping .env file setup. Make sure to configure it before proceeding."
            break;;
        * ) echo "Please answer yes or no.";;
    esac
done

# Update Composer dependencies
echo -e "${GREEN}Updating Composer dependencies...${NC}"
composer update || { echo -e "${RED}Error: Composer update failed. Please check the compatibility of your dependencies.${NC}"; exit 1; }

# Composer install
echo -e "${GREEN}Running Composer install...${NC}"
composer install || { echo -e "${RED}Error: Composer install failed.${NC}"; exit 1; }

# Set file permissions
echo -e "${GREEN}Setting file permissions...${NC}"
sudo chown -R www-data:www-data $PROJECT_DIR
sudo chmod -R 755 $PROJECT_DIR
sudo chmod -R 775 $PROJECT_DIR/storage
sudo chmod -R 775 $PROJECT_DIR/bootstrap/cache

# Generate application key
echo -e "${GREEN}Generating application key...${NC}"
sudo -u www-data php artisan key:generate || { echo -e "${RED}Error: Failed to generate application key.${NC}"; exit 1; }

# Migrate the database
echo -e "${GREEN}Migrating the database...${NC}"
sudo -u www-data php artisan migrate || { echo -e "${RED}Error: Database migration failed.${NC}"; exit 1; }

# Handle Nginx configuration files
echo -e "${GREEN}Handling Nginx configuration files...${NC}"

# Find the correct Nginx configuration directory
if [ -d "/etc/nginx/sites-available" ]; then
    NGINX_CONF_DIR="/etc/nginx/sites-available"
    NGINX_ENABLED_DIR="/etc/nginx/sites-enabled"
elif [ -d "/usr/local/nginx/conf/sites-available" ]; then
    NGINX_CONF_DIR="/usr/local/nginx/conf/sites-available"
    NGINX_ENABLED_DIR="/usr/local/nginx/conf/sites-enabled"
else
    echo -e "${RED}Error: Unable to find Nginx configuration directory.${NC}"
    echo -e "${YELLOW}Would you like to create the standard Nginx configuration directories? (y/n):${NC} "
    read -r create_dirs
    if [[ $create_dirs =~ ^[Yy]$ ]]; then
        sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled
        NGINX_CONF_DIR="/etc/nginx/sites-available"
        NGINX_ENABLED_DIR="/etc/nginx/sites-enabled"
        echo -e "${GREEN}Created Nginx configuration directories.${NC}"
    else
        echo -e "${RED}Cannot proceed without Nginx configuration directories. Exiting.${NC}"
        exit 1
    fi
fi

# Navigate to the Nginx configuration directory
cd "$NGINX_CONF_DIR" || { echo -e "${RED}Error: $NGINX_CONF_DIR directory does not exist.${NC}"; exit 1; }

# List all configuration files excluding default
EXISTING_FILES=$(ls | grep -v '^default$')

if [ -n "$EXISTING_FILES" ]; then
    echo "Found existing Nginx configuration files:"
    echo "$EXISTING_FILES"

    while true; do
        echo -e "${YELLOW}Do you want to remove existing configuration files? (y/n):${NC} "
        read -r remove_yn
        case $remove_yn in
            [Yy]* )
                echo "Removing existing configuration files..."
                sudo rm -f $EXISTING_FILES
                break;;
            [Nn]* )
                echo "Skipping file removal."
                break;;
            * ) echo "Please answer yes or no.";;
        esac
    done
fi

# Create new configuration file
CONFIG_FILE="$NGINX_CONF_DIR/$DOMAIN_NAME"
if [ -e "$CONFIG_FILE" ]; then
    echo -e "${YELLOW}Configuration file for $DOMAIN_NAME already exists. Do you want to overwrite it? (y/n):${NC} "
    read -r overwrite_yn
    if [ "$overwrite_yn" == "y" ]; then
        echo "Overwriting $DOMAIN_NAME configuration file..."
    else
        echo "Skipping configuration file creation."
        exit 1
    fi
else
    echo "Creating new Nginx configuration file..."
fi

cat <<EOL | sudo tee $CONFIG_FILE
server {
    listen 80;
    server_name $DOMAIN_NAME;

    root /var/www/html/$PROJECT_NAME/public;
    index index.php index.html index.htm;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location ~ \.php\$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php$PHP_VERSION-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\.ht {
        deny all;
    }
}
EOL

# Enable new configuration and restart Nginx
echo -e "${GREEN}Enabling new configuration and restarting Nginx...${NC}"
sudo ln -sf $CONFIG_FILE $NGINX_ENABLED_DIR/
sudo nginx -t && sudo systemctl reload nginx

echo -e "${GREEN}Deployment script completed successfully.${NC}"